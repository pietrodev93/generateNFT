var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _ethers = require("ethers");

var _AbstractWeb3Connector = _interopRequireDefault(require("./AbstractWeb3Connector"));

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function () {
    var Super = (0, _getPrototypeOf2.default)(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

var MagicWeb3Connector = function (_AbstractWeb3Connecto) {
  (0, _inherits2.default)(MagicWeb3Connector, _AbstractWeb3Connecto);

  var _super = _createSuper(MagicWeb3Connector);

  function MagicWeb3Connector() {
    var _this;

    (0, _classCallCheck2.default)(this, MagicWeb3Connector);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.type = 'MagicLink';

    _this.deactivate = function () {
      return _regenerator.default.async(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.unsubscribeToEvents(_this.provider);

              if (!_this.magicUser) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return _regenerator.default.awrap(_this.magicUser.user.logout());

            case 4:
              _this.account = null;
              _this.chainId = null;

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    };

    return _this;
  }

  (0, _createClass2.default)(MagicWeb3Connector, [{
    key: "activate",
    value: function (_ref) {
      var email, apiKey, network, magic, ether, Magic, _require, _window, loggedIn, signer, _await$ether$getNetwo, chainId, address;

      return _regenerator.default.async(function (_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              email = _ref.email, apiKey = _ref.apiKey, network = _ref.network;
              magic = null;
              ether = null;
              _context2.prev = 3;
              _context2.next = 6;
              return _regenerator.default.awrap(this.deactivate());

            case 6:
              _context2.next = 10;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](3);

            case 10:
              if (email) {
                _context2.next = 12;
                break;
              }

              throw new Error('"email" not provided, please provide Email');

            case 12:
              if (apiKey) {
                _context2.next = 14;
                break;
              }

              throw new Error('"apiKey" not provided, please provide Api Key');

            case 14:
              if (network) {
                _context2.next = 16;
                break;
              }

              throw new Error('"network" not provided, please provide network');

            case 16:
              try {
                Magic = (_require = require('magic-sdk')) == null ? void 0 : _require.Magic;
              } catch (error) {}

              if (!Magic) {
                Magic = (_window = window) == null ? void 0 : _window.Magic;
              }

              if (Magic) {
                _context2.next = 20;
                break;
              }

              throw new Error('Cannot enable via MagicLink: dependency "magic-sdk" is missing');

            case 20:
              _context2.prev = 20;
              magic = new Magic(apiKey, {
                network: network
              });
              ether = new _ethers.ethers.providers.Web3Provider(magic.rpcProvider);
              _context2.next = 25;
              return _regenerator.default.awrap(magic.auth.loginWithMagicLink({
                email: email
              }));

            case 25:
              _context2.next = 30;
              break;

            case 27:
              _context2.prev = 27;
              _context2.t1 = _context2["catch"](20);
              throw new Error('Error during enable via MagicLink, please double check network and apikey');

            case 30:
              _context2.next = 32;
              return _regenerator.default.awrap(magic.user.isLoggedIn());

            case 32:
              loggedIn = _context2.sent;

              if (!loggedIn) {
                _context2.next = 48;
                break;
              }

              signer = ether.getSigner();
              _context2.next = 37;
              return _regenerator.default.awrap(ether.getNetwork());

            case 37:
              _await$ether$getNetwo = _context2.sent;
              chainId = _await$ether$getNetwo.chainId;
              _context2.next = 41;
              return _regenerator.default.awrap(signer.getAddress());

            case 41:
              address = _context2.sent.toLowerCase();
              this.account = address;
              this.provider = ether.provider;
              this.chainId = "0x" + chainId.toString(16);
              this.magicUser = magic;
              this.subscribeToEvents(this.provider);
              return _context2.abrupt("return", {
                provider: this.provider,
                account: this.account,
                chainId: this.chainId
              });

            case 48:
              throw new Error('Error during enable via MagicLink, login to magic failed');

            case 49:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[3, 8], [20, 27]], Promise);
    }
  }]);
  return MagicWeb3Connector;
}(_AbstractWeb3Connector.default);

exports.default = MagicWeb3Connector;